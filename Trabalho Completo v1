import re
def menu(numero, basei, basef):#Menu do programa
    if basei == basef:
        return numero
    else:
        if basei != '10' or basef == '10':
            if basei == '2':
                numero = binario_para_dez(numero)
            elif basei == '5':
                numero = cinco_para_dez(numero)
            elif basei == '8':
                numero = oito_para_dez(numero)
            else:
                numero = hex_para_dez(numero)
        if basef == '2':
            numero = dez_para_binario(numero)
        elif basef == '5':
            numero = dez_para_cinco(numero)
        elif basef == '8':
            numero = dez_para_oito(numero)
        elif basef == '16':
            numero = dez_para_hex(numero)
        return numero

def verifica_base(numero,base): #Função que verifica se está na base correta.
    if base=='2':
        if not re.match("^[0-1]*$", numero): #re.match("padrão na tabela ASCII",string) no caso 0 e 1 apenas.
            #print('Numero inválido')         #Print temporario apenas para intuito de debug.
            return False
        else:
            #print('Número Válido')
            return True
    if base=='5':
        if not re.match("^[0-4]*$", numero):
            #print('Numero inválido')
            return False
        else:
            #print('Número Válido')
            return True
    if base=='8':
        if not re.match("^[0-7]*$", numero):
            #print('Numero inválido')
            return False
        else:
            #print('Número Válido')
            return True
    if base=='10':
        if not re.match("^[0-9]*$", numero):
            #print('Numero inválido')
            return False
        else:
            #print('Número Válido')
            return True
    if base=='16':
        if not re.match("^[0-9,A-F]*$", numero):
            #print('Numero inválido')
            return False
        else:
            #print('Número Válido')
            return True

def binario_para_dez(numero):
    v = []
    dez = 0
    i = len(numero)-1
    while i >= 0:
        v.append(int(numero[i]))
        i = i -1
    for n in range(len(v)):
        if v[n] == 1:
            dez += 2**n
    return str(dez)

def cinco_para_dez(numero):
    v = []
    cinco = 0
    i = len(numero)-1
    while i >= 0:
        v.append(int(numero[i]))
        i = i - 1
    for n in range(len(v)):
        if v[n] == 1:
            cinco += 1*(5**n)
        elif v[n] == 2:
            cinco += 2*(5**n)
        elif v[n] == 3:
            cinco += 3*(5**n)
        elif v[n] == 4:
            cinco += 4*(5**n)
    return str(cinco)

def oito_para_dez(numero):
    v = []
    oito = 0
    i = len(numero)-1
    while i >= 0:
        v.append(int(numero[i]))
        i = i - 1
    for n in range(len(v)):
        if v[n] == 1:
            oito += 1*(8**n)
        elif v[n] == 2:
            oito += 2*(8**n)
        elif v[n] == 3:
            oito += 3*(8**n)
        elif v[n] == 4:
            oito += 4*(8**n)
        elif v[n] == 5:
            oito += 5*(8**n)
        elif v[n] == 6:
            oito += 6*(8**n)
        elif v[n] == 7:
            oito += 7*(8**n)
    return str(oito)

def hex_para_dez(numero):
    v = []
    hex = 0
    i = len(numero)-1
    while i >= 0:
        v.append(numero[i])
        i = i - 1
    for n in range(len(v)):
        if v[n] == '1':
            hex += 1*(16**n)
        elif v[n] == '2':
            hex += 2*(16**n)
        elif v[n] == '3':
            hex += 3*(16**n)
        elif v[n] == '4':
            hex += 4*(16**n)
        elif v[n] == '5':
            hex += 5*(16**n)
        elif v[n] == '6':
            hex += 6*(16**n)
        elif v[n] == '7':
            hex += 7*(16**n)
        elif v[n] == '8':
            hex += 8*(16**n)
        elif v[n] == '9':
            hex += 9*(16**n)
        elif v[n] == 'A':
            hex += 10*(16**n)
        elif v[n] == 'B':
            hex += 11*(16**n)
        elif v[n] == 'C':
            hex += 12*(16**n)
        elif v[n] == 'D':
            hex += 13*(16**n)
        elif v[n] == 'E':
            hex += 14*(16**n)
        elif v[n] == 'F':
            hex += 15*(16**n)
    return str(hex)

def dez_para_binario(numero):
    num = int(numero)
    inverso = []
    binario = ""
    while num >= 2:
        inverso.append(num%2)
        num = int(num/2)
    inverso.append(num)
    binario = inverter_vetor(inverso)
    return binario

def dez_para_cinco(numero):
    num = int(numero)
    inverso = []
    basecinco = ""
    while num >= 5:
        inverso.append(num%5)
        num = int(num/5)
    inverso.append(num)
    basecinco = inverter_vetor(inverso)
    return basecinco

def dez_para_oito(numero):
    num = int(numero)
    inverso = []
    baseoito = ""
    while num >= 8:
        inverso.append(num%8)
        num = int(num/8)
    inverso.append(num)
    baseoito = inverter_vetor(inverso)
    return baseoito

def dez_para_hex(numero):
    num = int(numero)
    inverso = []
    hex = ""
    while num >= 16:
        if num%16 > 9:
            if num%16 == 10:
                inverso.append('A')
            elif num%16 == 11:
                inverso.append('B')
            elif num%16 == 12:
                inverso.append('C')
            elif num%16 == 13:
                inverso.append('D')
            elif num%16 == 14:
                inverso.append('E')
            elif num%16 == 15:
                inverso.append('F')
        else:
            inverso.append(num%16)
        num = int(num/16)
    if num > 9:
        if num == 10:
            inverso.append('A')
        elif num == 11:
            inverso.append('B')
        elif num == 12:
            inverso.append('C')
        elif num == 13:
            inverso.append('D')
        elif num == 14:
            inverso.append('E')
        elif num == 15:
            inverso.append('F')
    else:
        inverso.append(num)
    hex = inverter_vetor(inverso)
    return hex

def inverter_vetor(vetor):
    vfinal = []
    saida = ""
    i = len(vetor)-1
    while i>=0:
        vfinal.append(vetor[i])
        i = i - 1
    for a in range(len(vfinal)):
        saida += str(vfinal[a])
    return saida

numeroinicial = input("Digite o número que deseja converter: ")
baseinicial = input("Digite a base do número informado: ")
basefinal = input("Digite a base desejada: ")
if verifica_base(numeroinicial,baseinicial)==True:
    numerofinal = menu(numeroinicial, baseinicial, basefinal)
    print("O número", numeroinicial,"na base", baseinicial, "equivale a", numerofinal, "na base", basefinal,".")
else:
    print("Número na base errada!")
input()
